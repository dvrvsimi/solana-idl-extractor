//! Discriminator patterns and constants

// Anchor uses 8-byte discriminators generated by:
// - instruction discriminators: first 8 bytes of sha256("global:<namespace>")
// - account discriminators: first 8 bytes of sha256("account:<account_name>")

/// Anchor discriminator namespace prefixes
pub const ANCHOR_DISCRIMINATOR_NAMESPACE: &str = "global:";
pub const ANCHOR_ACCOUNT_NAMESPACE: &str = "account:";
pub const ANCHOR_DISCRIMINATOR_LENGTH: usize = 8;

/// Common Anchor Program Discriminators
pub mod anchor {
    // Common Anchor account prefixes
    pub const ACCOUNT_DISCRIMINATOR_LENGTH: usize = 8;
    pub const ACCOUNT_PREFIX: &str = "account:";
    pub const GLOBAL_PREFIX: &str = "global:";
    
    // Common program discriminators
    pub const TOKEN_PROGRAM_INITIALIZE_MINT: [u8; 8] = [152, 35, 167, 254, 239, 177, 226, 42]; // initialize_mint
    pub const TOKEN_PROGRAM_INITIALIZE_ACCOUNT: [u8; 8] = [57, 152, 120, 106, 135, 132, 126, 27]; // initialize_account
    pub const TOKEN_PROGRAM_TRANSFER: [u8; 8] = [3, 4, 92, 44, 194, 108, 201, 178]; // transfer
    pub const TOKEN_PROGRAM_MINT_TO: [u8; 8] = [232, 33, 213, 118, 160, 195, 162, 110]; // mint_to
    pub const TOKEN_PROGRAM_BURN: [u8; 8] = [239, 39, 99, 42, 82, 69, 48, 108]; // burn
    
    // Common account type discriminators
    pub const MINT_ACCOUNT: [u8; 8] = [134, 119, 217, 228, 118, 118, 175, 227]; // Mint
    pub const TOKEN_ACCOUNT: [u8; 8] = [57, 144, 75, 168, 250, 117, 193, 111]; // TokenAccount
}

// SPL Token Program - Non-Anchor but common
pub mod spl_token {
    pub const INITIALIZE_MINT: u8 = 0;
    pub const INITIALIZE_ACCOUNT: u8 = 1;
    pub const TRANSFER: u8 = 3;
    pub const APPROVE: u8 = 4;
    pub const REVOKE: u8 = 5;
    pub const MINT_TO: u8 = 7;
    pub const BURN: u8 = 8;
    pub const CLOSE_ACCOUNT: u8 = 9;
}

// System Program instruction codes
pub mod system_program {
    pub const CREATE_ACCOUNT: u32 = 0;
    pub const ASSIGN: u32 = 1;
    pub const TRANSFER: u32 = 2;
    pub const CREATE_ACCOUNT_WITH_SEED: u32 = 3;
    pub const ADVANCE_NONCE_ACCOUNT: u32 = 4;
    pub const WITHDRAW_NONCE_ACCOUNT: u32 = 5;
    pub const INITIALIZE_NONCE_ACCOUNT: u32 = 6;
    pub const AUTHORIZE_NONCE_ACCOUNT: u32 = 7;
    pub const ALLOCATE: u32 = 8;
    pub const ALLOCATE_WITH_SEED: u32 = 9;
    pub const ASSIGN_WITH_SEED: u32 = 10;
    pub const TRANSFER_WITH_SEED: u32 = 11;
    pub const UPGRADE_NONCE_ACCOUNT: u32 = 12;
}

// Common Solana program IDs as strings for easy comparison
pub mod program_ids {
    pub const SYSTEM_PROGRAM: &str = "11111111111111111111111111111111";
    pub const TOKEN_PROGRAM: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
    pub const ASSOCIATED_TOKEN_PROGRAM: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
    pub const METADATA_PROGRAM: &str = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s";
}